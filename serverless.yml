service: jwt

package:
  individually: true  # Create an optimized package for our functions

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  logRetentionInDays: 30

custom:
  stage: ${opt:stage, self:provider.stage}
  authorizer:
    arn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-authorizer
    resultTtlInSeconds: 0
    identitySource: method.request.header.Authorization
    identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'
    type: token

functions:

  get-token:
    handler: functions/get-token.get
    events:
      - http:
          path: get-token
          method: post

  read-account:
    handler: functions/read-account.read
    events:
      - http:
          path: read-account
          method: get
          authorizer: ${self:custom.authorizer}
    environment:
      TABLE: !Ref Table
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !GetAtt Table.Arn

  authorizer:
    handler: functions/authorizer.authorizer

  create-account:
    handler: functions/create-account.create
    events:
      - http:
          path: create-account
          method: post
    environment:
      TABLE: !Ref Table
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt Table.Arn

resources:
  Resources:

    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: account
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: account
            AttributeType: S

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
